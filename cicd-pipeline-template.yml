spec:
  inputs:
    image-name:
      type: string
    env-image-name:
      type: string
    environment:
      type: string
    directory-name:
      type: string

---

image: "docker:latest"

variables:
  IMAGE_BASE: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"
  DOCKER_BUILDKIT: 1

stages:
  - prep
  - build
  - test
  - deliver
  - deploy

preparation:
  stage: prep
  script:
    - export BUILD_ID=$(date +%Y%m%d%H%M)
    - echo "BUILD_ID=${BUILD_ID}" > context.env

    # Set Gitlab image names
    - echo "$[[ inputs.env-image-name ]]_IMAGE_NAME=${IMAGE_BASE}/$[[ inputs.image-name ]]:$[[ inputs.environment ]]-${BUILD_ID}" >> context.env

    # Set Dockerhub image names
    - echo "DOCKER_HUB_$[[ inputs.env-image-name ]]_IMAGE_NAME=${DOCKER_HUB_USER}/$[[ inputs.image-name ]]:$[[ inputs.environment ]]-${BUILD_ID}" >> context.env

  artifacts:
    paths:
      - context.env

build:
  stage: build
  image:
    name: "gcr.io/kaniko-project/executor:v1.14.0-debug"
    entrypoint: [""]  # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html#building-a-docker-image-with-kaniko
  script:
    - export $(cat context.env | xargs)

    - /kaniko/executor
      --dockerfile=$[[ inputs.directory-name ]]/Dockerfile
      --context=./$[[ inputs.directory-name ]]
      --destination=${$[[ inputs.env-image-name ]]_IMAGE_NAME}
  needs:
    - job: preparation
      artifacts: true

unit-test:
  stage: test
  tags:
    - test
  script:
    - export $(cat context.env | xargs)

    - cd $[[ inputs.directory-name ]]/.scripts/unit
    - chmod +x test.sh
    - sh test.sh
  needs:
    - job: build
    - job: preparation
      artifacts: true

integration-test:
  stage: test
  tags:
    - test
  script:
    - export $(cat context.env | xargs)

    - cd $[[ inputs.directory-name ]]/.scripts/integration
    - chmod +x test.sh
    - sh test.sh
  needs:
    - job: unit-test
    - job: preparation
      artifacts: true

functional-test:
  stage: test
  tags:
    - test
  script:
    - export $(cat context.env | xargs)

    - cd $[[ inputs.directory-name ]]/.scripts/functional
    - chmod +x test.sh
    - sh test.sh
  needs:
    - job: integration-test
    - job: preparation
      artifacts: true

component-test:
  stage: test
  tags:
    - test
  script:
    - export $(cat context.env | xargs)

    - cd $[[ inputs.directory-name ]]/.scripts/component
    - chmod +x test.sh
    - sh test.sh
  needs:
    - job: functional-test
    - job: preparation
      artifacts: true

e2e-test:
  stage: test
  tags:
    - test
  script:
    - export $(cat context.env | xargs)

    - cd $[[ inputs.directory-name ]]/.scripts/e2e
    - chmod +x test.sh
    - sh test.sh
  needs:
    - job: component-test
    - job: preparation
      artifacts: true

deliver-dockerhub:
  stage: deliver
  image:
    name: jess/img:latest
    entrypoint: [""]
  script:
    - export $(cat context.env | xargs)

    - echo "$CI_JOB_TOKEN" | img login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo "$DOCKER_HUB_PASS" | img login -u $DOCKER_HUB_USER --password-stdin

    - img pull $$[[ inputs.env-image-name ]]_IMAGE_NAME

    - img tag $$[[ inputs.env-image-name ]]_IMAGE_NAME $DOCKER_HUB_$[[ inputs.env-image-name ]]_IMAGE_NAME

    - img push $DOCKER_HUB_$[[ inputs.env-image-name ]]_IMAGE_NAME
  needs:
    - job: e2e-test
    - job: preparation
      artifacts: true

deploy-prod:
  stage: deploy
  image:
    name: scastaneda16/kubectl-helm:latest
    entrypoint: [""]
  tags:
    - prod
  script:
    - export $(cat context.env | xargs)
    - cd helm_charts

    - sh build_dependencies.sh

    - helm upgrade 
      -i arqui-app app/
      -f $[[ inputs.directory-name ]]/values-$[[ inputs.directory-name ]].yaml 
      --set api.image.tag=$[[ inputs.environment ]]-${BUILD_ID}
  needs:
    - job: deliver-dockerhub
    - job: preparation
      artifacts: true